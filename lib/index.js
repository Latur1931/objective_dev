// Generated by CoffeeScript 1.9.2
var dev, fs, normalize, shared, tester;

normalize = require('path').normalize;

fs = require('fs');

shared = require('./shared');

tester = require('./tester');

module.exports = dev = shared.dev = {
  before: tester.before,
  testDir: 'test',
  sourceDir: 'lib',
  compileTo: void 0,
  init: function(callback) {
    var pipe;
    pipe = objective.pipe;
    pipe.on('prompt.commands.register.ask', function(command, next) {
      command.create('createModule', {
        description: '(dev) Create new module in the current project.',
        run: require('./commands/create_module'),
        help: "\nUsage: dev.createModule " + dev.testDir + "/path/to/module_name [templateName]\n\nCreates the '" + dev.testDir + "' file and the corresponding '" + dev.sourceDir + "' file.\n\n    ie.\n\n        " + dev.testDir + "/path/to/module_name.js\n        " + dev.sourceDir + "/path/to/module_name.js\n\nThe paths match up so that when the '" + dev.sourceDir + "' file changes the\ncorresponding '" + dev.testDir + "' file can be found and run.\n\nIt is recommended to use underscores between the name parts\nso that the module injector can be used in tests.\n\n    ie.  \n\n        module_name.js will be injectable as ModuleName\n        (provided that it is unique project-wide)\n\nIf templateName is specified the corresponding template will be used.\n\n    ie.\n\n        ~/.objective/templates/dev/templateName_spec.js\n\n\nNOTE: The templates are only installed upon registration. (--register)\n",
        autoComplete: function(args, callback) {
          var directory, file, i, len, matches;
          if (args.length > 2) {
            return callback(null, null);
          }
          if (args.length === 1) {
            return callback(null, {
              type: 'path',
              startIn: normalize(dev.testDir + '/'),
              onlyDirectories: true
            });
          }
          if (args.length === 2) {
            try {
              directory = fs.readdirSync(process.env.HOME + '/.objective/templates/dev');
              matches = [];
              for (i = 0, len = directory.length; i < len; i++) {
                file = directory[i];
                if (file.match(new RegExp("_spec." + shared.language))) {
                  matches.push(file.replace("_spec." + shared.language, ''));
                }
              }
              return callback(null, matches);
            } catch (_error) {
              return callback(null, null);
            }
          }
        }
      });
      command.create('renameModule', {
        description: '(dev) Deletes module from the current project.',
        run: function(args, callback) {
          return callback();
        }
      });
      command.create('destroyModule', {
        description: '(dev) Deletes module from the current project.',
        run: function(args, callback) {
          return callback();
        }
      });
      command.create('testModule', {
        description: '(dev) Test a specific module.',
        run: function(args, callback) {
          return callback();
        }
      });
      command.create('testAll', {
        description: '(dev) Test all modules.',
        run: function(args, callback) {
          return callback();
        }
      });
      return next();
    });
    return callback();
  }
};
