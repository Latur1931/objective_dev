// Generated by CoffeeScript 1.9.2
var dev, normalize;

normalize = require('path').normalize;

module.exports = dev = {
  testDir: 'test',
  sourceDir: 'lib',
  compileTo: void 0,
  init: function(arg, callback) {
    var pipe, prompt;
    pipe = arg.pipe, prompt = arg.prompt;
    pipe.on('prompt.commands.register.ask', function(command, next) {
      command.create('dev.createModule', {
        description: 'Create new module in the current project.',
        run: function(args, callback) {
          return callback();
        },
        help: "\nUsage: dev.createModule " + dev.testDir + "/path/to/module_name\n\nCreates the '" + dev.testDir + "' file and the corresponding '" + dev.sourceDir + "' file.\n\n    ie.\n\n        " + dev.testDir + "/path/to/module_name.js\n        " + dev.sourceDir + "/path/to/module_name.js\n\nThe paths match up so that when the '" + dev.sourceDir + "' file changes the\ncorresponding '" + dev.testDir + "' file can be found and run.\n\nIt is recommended to use underscores between the name parts\nso that the module injector can be used in tests.\n\n    ie.  \n\n        module_name.js will be injectable as ModuleName\n        (provided that it is unique project-wide)\n",
        autoComplete: {
          type: 'path',
          startIn: normalize(dev.testDir + '/'),
          ignoreFiles: true
        }
      });
      command.create('dev.destroyModule', {
        description: 'Deletes module from the current project.',
        run: function(args, callback) {
          return callback();
        }
      });
      command.create('dev.killModule', {
        description: 'Deletes module and performs git rm.',
        run: function(args, callback) {
          return callback();
        }
      });
      command.create('dev.testModule', {
        description: 'Test a specific module.',
        run: function(args, callback) {
          return callback();
        }
      });
      command.create('dev.testAll', {
        description: 'Test all modules.',
        run: function(args, callback) {
          return callback();
        }
      });
      return next();
    });
    pipe.on('files.recurse.start', function(arg1, next) {
      var path;
      path = arg1.path;
      return next();
    });
    pipe.on('files.recurse.entering', function(arg1, next) {
      var path;
      path = arg1.path;
      return next();
    });
    pipe.on('files.recurse.found', function(arg1, next) {
      var path;
      path = arg1.path;
      return next();
    });
    pipe.on('files.recurse.end', function(data, next) {
      return next();
    });
    pipe.on('files.recurse.error', function(error, next) {
      return next();
    });
    return callback();
  }
};
