// Generated by CoffeeScript 1.9.2
var CreateModule, fs, mkpath, path, shared, uuid;

shared = require('../shared');

uuid = require('uuid');

fs = require('fs');

path = require('path');

mkpath = require('mkpath');

module.exports = CreateModule = function(args, callback) {
  var basename, ext, i, lang, len, moduleName, newObjective, part, parts, sourceDir, spath, stat, template, testDir, tpath;
  tpath = args[0];
  lang = shared.language;
  testDir = shared.dev.testDir;
  sourceDir = shared.dev.sourceDir;
  ext = tpath.split('.').pop();
  if (ext === lang) {
    'allgood';
  } else if (ext === 'coffee' || ext === 'js') {
    lang = ext;
  } else {
    tpath += '.' + lang;
  }
  parts = tpath.split('.');
  ext = parts.pop();
  tpath = parts.join('.') + '_' + testDir + '.' + ext;
  basename = path.basename(tpath).replace('_' + testDir + '.' + ext, '');
  if (parts = basename.split(/[-\._]/)) {
    moduleName = '';
    for (i = 0, len = parts.length; i < len; i++) {
      part = parts[i];
      moduleName += part[0].toUpperCase() + part.slice(1);
    }
  }
  try {
    stat = fs.lstatSync(tpath);
    if (stat.isDirectory()) {
      return callback(new Error('Cannot create module at ' + tpath));
    }
    return callback(new Error('File already exists at ' + tpath));
  } catch (_error) {}
  console.log('TODO: online creation');
  console.log('TODO: warn on collision');
  spath = tpath.replace(new RegExp("^" + testDir), sourceDir);
  spath = spath.replace(new RegExp("_" + testDir + "\."), '.');
  newObjective = {
    uuid: uuid.v4(),
    title: moduleName,
    description: '',
    "private": shared.objective["private"]
  };
  template = args[1] || 'default';
  return CreateModule.writeSpecFile(tpath, template, lang, newObjective, function(e) {
    if (e != null) {
      return callback(e);
    }
    CreateModule.writeSourceFile(spath, moduleName, lang, newObjective, function(e) {
      return callback(e);
    });
  });
};

CreateModule.writeSpecFile = function(out, template, lang, objective, callback) {
  var e, stat, templateFile, templateTxt;
  try {
    templateFile = process.env.HOME + path.sep + (".objective/templates/dev/" + template + "_spec." + lang);
    templateTxt = fs.readFileSync(templateFile).toString();
    templateTxt = templateTxt.replace(/__UUID__/, objective.uuid);
    templateTxt = templateTxt.replace(/__TITLE__/, objective.title);
    templateTxt = templateTxt.replace(/__PRIVATE__/, objective["private"]);
    try {
      stat = fs.lstatSync(out);
      return callback(new Error('File already exists: ' + out));
    } catch (_error) {}
    mkpath.sync(path.dirname(out));
    fs.writeFileSync(out, templateTxt);
    console.log("\n-----> Created file " + out);
    return callback();
  } catch (_error) {
    e = _error;
    if (e.errno === 34) {
      return callback(new Error("Missing template " + templateFile + "(try --register)"));
    }
    return callback(e);
  }
};

CreateModule.writeSourceFile = function(out, moduleName, lang, objective, callback) {
  var e, stat;
  try {
    stat = fs.lstatSync(out);
    return callback(new Error('File already exists: ' + out));
  } catch (_error) {}
  try {
    mkpath.sync(path.dirname(out));
    fs.writeFileSync(out, "module.exports = " + moduleName + " = {}\n");
    console.log("\n-----> Created file " + out);
    return callback();
  } catch (_error) {
    e = _error;
    return callback(e);
  }
};
